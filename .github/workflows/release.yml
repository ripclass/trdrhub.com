name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      pre_release:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false
      release_notes:
        description: 'Custom release notes'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version format
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.pre_release }}"
          else
            VERSION="${{ github.ref_name }}"
            # Check if version contains pre-release identifiers
            if [[ "$VERSION" =~ (alpha|beta|rc|pre) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi

          # Validate version format (v1.2.3, v1.2.3-alpha.1, etc.)
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
            exit 1
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT

          echo "✅ Version validated: $VERSION (pre-release: $IS_PRERELEASE)"

      - name: Check if tag exists
        if: github.event_name == 'workflow_dispatch'
        run: |
          if git rev-parse "${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "❌ Tag ${{ steps.version.outputs.version }} already exists"
            exit 1
          fi

      - name: Verify changelog entry
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          VERSION_NUMBER=${VERSION#v}  # Remove 'v' prefix

          if [ ! -f "CHANGELOG.md" ]; then
            echo "⚠️ CHANGELOG.md not found, skipping changelog validation"
            exit 0
          fi

          if ! grep -q "## \[$VERSION_NUMBER\]" CHANGELOG.md; then
            echo "⚠️ No changelog entry found for version $VERSION_NUMBER"
            echo "Please add an entry to CHANGELOG.md before releasing"
          else
            echo "✅ Changelog entry found for version $VERSION_NUMBER"
          fi

  run-tests:
    name: Run Full Test Suite
    runs-on: ubuntu-latest
    needs: validate-release

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: lcopilot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './apps/web/package-lock.json'

      - name: Install backend dependencies
        working-directory: ./apps/api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Install frontend dependencies
        working-directory: ./apps/web
        run: npm ci

      - name: Run backend tests
        working-directory: ./apps/api
        run: |
          alembic upgrade head
          pytest tests/ -v --cov=src --cov-report=xml
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/lcopilot_test

      - name: Run frontend tests
        working-directory: ./apps/web
        run: |
          npm run test:unit -- --coverage --watchAll=false
          npm run test:components -- --coverage --watchAll=false

      - name: Build applications
        run: |
          # Build backend
          cd apps/api
          python -m compileall src/

          # Build frontend
          cd ../web
          npm run build

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: validate-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: Python security audit
        working-directory: ./apps/api
        run: |
          python -m pip install --upgrade pip
          pip install safety
          safety check --json

      - name: Node.js security audit
        working-directory: ./apps/web
        run: |
          npm audit --audit-level=high

  build-release-images:
    name: Build Release Images
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests, security-audit]

    permissions:
      contents: read
      packages: write

    outputs:
      api_image: ${{ steps.meta-api.outputs.tags }}
      web_image: ${{ steps.meta-web.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for API image
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api
          tags: |
            type=semver,pattern={{version}},value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.validate-release.outputs.version }}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for Web image
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web
          tags: |
            type=semver,pattern={{version}},value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.validate-release.outputs.version }}

      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/web
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_API_URL=/api

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release-images]

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: release-notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          VERSION_NUMBER=${VERSION#v}

          # Custom release notes from input or extract from changelog
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
          elif [ -f "CHANGELOG.md" ]; then
            # Extract release notes from changelog
            RELEASE_NOTES=$(awk "/## \[$VERSION_NUMBER\]/,/## \[/{if(/## \[/ && !/## \[$VERSION_NUMBER\]/) exit; if(!/## \[$VERSION_NUMBER\]/) print}" CHANGELOG.md | sed '/^$/d')
          else
            # Generate automatic release notes
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [ -n "$PREVIOUS_TAG" ]; then
              RELEASE_NOTES="## Changes since $PREVIOUS_TAG"$'\n\n'
              RELEASE_NOTES+=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD | grep -v "Merge pull request" | head -20)
            else
              RELEASE_NOTES="Initial release of LCopilot $VERSION"
            fi
          fi

          # Add Docker images information
          RELEASE_NOTES+=$'\n\n'"## Docker Images"$'\n\n'
          RELEASE_NOTES+="- API: \`${{ needs.build-release-images.outputs.api_image }}\`"$'\n'
          RELEASE_NOTES+="- Web: \`${{ needs.build-release-images.outputs.web_image }}\`"$'\n\n'

          # Add deployment information
          RELEASE_NOTES+="## Deployment"$'\n\n'
          RELEASE_NOTES+="To deploy this release, update your Helm values with the new image tags:"$'\n\n'
          RELEASE_NOTES+='```yaml'$'\n'
          RELEASE_NOTES+="image:"$'\n'
          RELEASE_NOTES+="  api:"$'\n'
          RELEASE_NOTES+="    tag: $VERSION_NUMBER"$'\n'
          RELEASE_NOTES+="  web:"$'\n'
          RELEASE_NOTES+="    tag: $VERSION_NUMBER"$'\n'
          RELEASE_NOTES+='```'

          # Save to file for GitHub release
          echo "$RELEASE_NOTES" > release-notes.md

      - name: Create git tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ needs.validate-release.outputs.version }}" -m "Release ${{ needs.validate-release.outputs.version }}"
          git push origin "${{ needs.validate-release.outputs.version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: LCopilot ${{ needs.validate-release.outputs.version }}
          body_path: release-notes.md
          prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
          generate_release_notes: false
          files: |
            CHANGELOG.md

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [create-release]
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy release to staging
        run: |
          export KUBECONFIG=kubeconfig
          VERSION_NUMBER="${{ needs.validate-release.outputs.version }}"
          VERSION_NUMBER=${VERSION_NUMBER#v}

          helm upgrade --install lcopilot-staging ./deploy/helm \
            --namespace lcopilot-staging \
            --create-namespace \
            --set image.api.tag=$VERSION_NUMBER \
            --set image.web.tag=$VERSION_NUMBER \
            --set environment=staging \
            --set ingress.hosts[0].host=staging.lcopilot.com \
            --values ./deploy/helm/values-staging.yaml \
            --wait --timeout=10m

      - name: Verify staging deployment
        run: |
          export KUBECONFIG=kubeconfig
          kubectl rollout status deployment/lcopilot-api -n lcopilot-staging --timeout=300s
          kubectl rollout status deployment/lcopilot-web -n lcopilot-staging --timeout=300s

          # Wait for services to be ready
          sleep 30

          # Test the deployment
          curl --retry 10 --retry-delay 5 --fail https://staging.lcopilot.com/health
          curl --retry 10 --retry-delay 5 --fail https://staging.lcopilot.com/api/health

  production-approval:
    name: Production Deployment Approval
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: needs.validate-release.outputs.is_prerelease == 'false'
    environment: production-approval

    steps:
      - name: Manual approval required
        run: |
          echo "✅ Staging deployment successful"
          echo "⏳ Waiting for manual approval to deploy to production"
          echo "📋 Release: ${{ needs.validate-release.outputs.version }}"
          echo "🔗 Staging URL: https://staging.lcopilot.com"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-release, production-approval]
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to production (Blue-Green)
        run: |
          export KUBECONFIG=kubeconfig
          VERSION_NUMBER="${{ needs.validate-release.outputs.version }}"
          VERSION_NUMBER=${VERSION_NUMBER#v}

          # Deploy to green environment
          helm upgrade --install lcopilot-green ./deploy/helm \
            --namespace lcopilot-production \
            --create-namespace \
            --set image.api.tag=$VERSION_NUMBER \
            --set image.web.tag=$VERSION_NUMBER \
            --set environment=production \
            --set deployment.suffix=green \
            --set ingress.hosts[0].host=app.lcopilot.com \
            --values ./deploy/helm/values-production.yaml \
            --wait --timeout=15m

      - name: Verify green deployment
        run: |
          export KUBECONFIG=kubeconfig
          kubectl rollout status deployment/lcopilot-api-green -n lcopilot-production --timeout=600s
          kubectl rollout status deployment/lcopilot-web-green -n lcopilot-production --timeout=600s

          # Test green environment
          kubectl port-forward -n lcopilot-production service/lcopilot-api-green 8080:8000 &
          sleep 10
          curl --retry 5 --retry-delay 2 --fail http://localhost:8080/health
          kill %1

      - name: Switch traffic to green
        run: |
          export KUBECONFIG=kubeconfig

          # Update service selectors to point to green deployment
          kubectl patch service lcopilot-api -n lcopilot-production \
            -p '{"spec":{"selector":{"app.kubernetes.io/instance":"lcopilot-green"}}}'
          kubectl patch service lcopilot-web -n lcopilot-production \
            -p '{"spec":{"selector":{"app.kubernetes.io/instance":"lcopilot-green"}}}'

          # Wait for traffic switch
          sleep 30

          # Verify production deployment
          curl --retry 10 --retry-delay 5 --fail https://app.lcopilot.com/health
          curl --retry 10 --retry-delay 5 --fail https://app.lcopilot.com/api/health

      - name: Clean up blue deployment
        run: |
          export KUBECONFIG=kubeconfig
          helm uninstall lcopilot-blue -n lcopilot-production || true

  post-release-tasks:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, deploy-production]
    if: always() && needs.deploy-production.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update version in package files
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          VERSION_NUMBER=${VERSION#v}

          # Update frontend package.json
          cd apps/web
          npm version $VERSION_NUMBER --no-git-tag-version

          # Update backend version
          cd ../api
          sed -i "s/version = \".*\"/version = \"$VERSION_NUMBER\"/" pyproject.toml || true

      - name: Create version bump PR
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: bump version to ${{ needs.validate-release.outputs.version }}"
          title: "chore: bump version to ${{ needs.validate-release.outputs.version }}"
          body: |
            Automated version bump after release ${{ needs.validate-release.outputs.version }}

            - Updates package.json version
            - Updates pyproject.toml version

            This PR is automatically created after a successful release.
          branch: chore/version-bump-${{ needs.validate-release.outputs.version }}
          delete-branch: true

      - name: Generate deployment summary
        run: |
          cat > deployment-summary.md << EOF
          # Deployment Summary - ${{ needs.validate-release.outputs.version }}

          **Release:** ${{ needs.validate-release.outputs.version }}
          **Deployed:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Environment:** Production

          ## Deployment Status
          - ✅ Staging deployment successful
          - ✅ Production deployment successful
          - ✅ Traffic switched to new version
          - ✅ Health checks passing

          ## Access URLs
          - Production: https://app.lcopilot.com
          - Staging: https://staging.lcopilot.com

          ## Docker Images
          - API: ${{ needs.build-release-images.outputs.api_image }}
          - Web: ${{ needs.build-release-images.outputs.web_image }}

          ## Next Steps
          - Monitor application metrics and logs
          - Verify all features are working correctly
          - Update documentation if needed
          EOF

      - name: Upload deployment summary
        uses: actions/upload-artifact@v3
        with:
          name: deployment-summary
          path: deployment-summary.md

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, deploy-production, post-release-tasks]
    if: always()

    steps:
      - name: Determine notification status
        run: |
          if [ "${{ needs.deploy-production.result }}" = "success" ]; then
            echo "STATUS=success" >> $GITHUB_ENV
            echo "STATUS_EMOJI=🚀" >> $GITHUB_ENV
            echo "STATUS_COLOR=good" >> $GITHUB_ENV
          else
            echo "STATUS=failure" >> $GITHUB_ENV
            echo "STATUS_EMOJI=❌" >> $GITHUB_ENV
            echo "STATUS_COLOR=danger" >> $GITHUB_ENV
          fi

      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          channel: '#releases'
          custom_payload: |
            {
              "text": "${{ env.STATUS_EMOJI }} LCopilot ${{ needs.validate-release.outputs.version }} Release",
              "attachments": [
                {
                  "color": "${{ env.STATUS_COLOR }}",
                  "fields": [
                    {
                      "title": "Version",
                      "value": "${{ needs.validate-release.outputs.version }}",
                      "short": true
                    },
                    {
                      "title": "Status",
                      "value": "${{ env.STATUS }}",
                      "short": true
                    },
                    {
                      "title": "Pre-release",
                      "value": "${{ needs.validate-release.outputs.is_prerelease }}",
                      "short": true
                    },
                    {
                      "title": "Production URL",
                      "value": "https://app.lcopilot.com",
                      "short": true
                    },
                    {
                      "title": "Release Notes",
                      "value": "<${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}|View Release>",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.RELEASES_SLACK_WEBHOOK_URL }}