name: Workflow Features CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'app/services/**'
      - 'app/core/events.py'
      - 'app/core/governance_hooks.py'
      - 'app/metrics/**'
      - 'app/routers/notifications.py'
      - 'app/routers/reports.py'
      - 'tests/workflows/**'
      - 'tests/api/test_notifications_api.py'
      - 'tests/api/test_reports_api.py'
      - 'src/components/notify/**'
      - 'src/pages/notifications/**'
      - 'ops/grafana/dashboards/workflows/**'
      - 'prom_rules/workflow.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'app/services/**'
      - 'app/core/events.py'
      - 'app/core/governance_hooks.py'
      - 'app/metrics/**'
      - 'app/routers/notifications.py'
      - 'app/routers/reports.py'
      - 'tests/workflows/**'
      - 'tests/api/test_notifications_api.py'
      - 'tests/api/test_reports_api.py'
      - 'src/components/notify/**'
      - 'src/pages/notifications/**'
      - 'ops/grafana/dashboards/workflows/**'
      - 'prom_rules/workflow.yml'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POSTGRES_PASSWORD: test_password
  REDIS_URL: redis://localhost:6379
  TEST_DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety detect-secrets
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run code formatting checks
      run: |
        black app/ tests/ --check --diff
        isort app/ tests/ --check-only --diff

    - name: Run linting
      run: |
        flake8 app/ tests/ --statistics --count

    - name: Run type checking
      run: |
        mypy app/ --ignore-missing-imports

    - name: Run security checks
      run: |
        bandit -r app/ -f json -o bandit-report.json
        safety check --json --output safety-report.json
        detect-secrets scan --all-files --baseline .secrets.baseline || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run database migrations
      run: |
        alembic upgrade head

    - name: Run workflow feature tests
      run: |
        make test_workflows

    - name: Run API tests
      run: |
        pytest tests/api/test_notifications_api.py tests/api/test_reports_api.py -v --cov=app

    - name: Generate coverage report
      run: |
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend,workflows
        name: workflow-features-backend

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript type checking
      run: npm run type-check

    - name: Run linting
      run: npm run lint

    - name: Run unit tests
      run: npm run test

    - name: Build project
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: dist/

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      mailhog:
        image: mailhog/mailhog:latest
        ports:
          - 1025:1025
          - 8025:8025

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        npm ci

    - name: Run database migrations
      run: |
        alembic upgrade head

    - name: Seed test data
      run: |
        python scripts/dev/seed_workflow_data.py

    - name: Start backend server
      run: |
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10

    - name: Start Celery worker
      run: |
        celery -A app.workers worker --loglevel=info &
        sleep 5

    - name: Build frontend
      run: npm run build

    - name: Start frontend server
      run: |
        npm run preview --port 3000 &
        sleep 5

    - name: Wait for services
      run: |
        curl --retry 10 --retry-delay 2 --retry-connrefused http://localhost:8000/health
        curl --retry 10 --retry-delay 2 --retry-connrefused http://localhost:3000

    - name: Run integration tests
      run: |
        pytest tests/integration/test_workflow_features.py -v

    - name: Test notification delivery
      run: |
        python tests/integration/test_notification_flow.py

    - name: Test export generation
      run: |
        python tests/integration/test_export_flow.py

    - name: Test governance workflow
      run: |
        python tests/integration/test_governance_flow.py

  validate-configs:
    name: Validate Configuration Files
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Validate Prometheus rules
      run: |
        docker run --rm -v $(pwd)/prom_rules:/rules prom/prometheus:latest \
          promtool check rules /rules/workflow.yml

    - name: Validate Grafana dashboards
      run: |
        for dashboard in ops/grafana/dashboards/workflows/*.json; do
          echo "Validating $dashboard"
          jq empty "$dashboard" || (echo "Invalid JSON in $dashboard" && exit 1)
        done

    - name: Validate OpenAPI specs
      run: |
        python -c "
        from app.main import app
        import json
        spec = app.openapi()
        with open('openapi.json', 'w') as f:
            json.dump(spec, f, indent=2)
        print('OpenAPI spec is valid')
        "

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: python, javascript

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install locust

    - name: Run database migrations
      run: |
        alembic upgrade head

    - name: Seed performance test data
      run: |
        python scripts/dev/seed_performance_data.py

    - name: Start application
      run: |
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        celery -A app.workers worker --loglevel=info &
        sleep 10

    - name: Run notification performance tests
      run: |
        locust -f tests/performance/test_notifications.py --headless \
          --users 50 --spawn-rate 10 --run-time 2m \
          --host http://localhost:8000 \
          --csv performance-notifications

    - name: Run export performance tests
      run: |
        locust -f tests/performance/test_exports.py --headless \
          --users 20 --spawn-rate 5 --run-time 3m \
          --host http://localhost:8000 \
          --csv performance-exports

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-*.csv

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint, test-backend, test-frontend, test-integration, validate-configs]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    environment:
      name: staging
      url: https://staging.trdrhub.com

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: trdrhub-api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:staging
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:staging

    - name: Deploy to staging
      run: |
        # Update Kubernetes deployment
        kubectl set image deployment/trdrhub-api \
          api=${{ steps.login-ecr.outputs.registry }}/trdrhub-api:${{ github.sha }} \
          --namespace=staging

        # Deploy monitoring stack
        make setup_monitoring

        # Wait for rollout
        kubectl rollout status deployment/trdrhub-api --namespace=staging

    - name: Run smoke tests
      run: |
        pytest tests/smoke/test_workflow_features.py --base-url=https://staging.trdrhub.com

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always()

    steps:
    - name: Notify Slack on success
      if: needs.deploy-staging.result == 'success'
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: '#deployments'
        SLACK_COLOR: good
        SLACK_MESSAGE: |
          🚀 Workflow Features deployed to staging successfully!
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
          Author: ${{ github.actor }}

    - name: Notify Slack on failure
      if: needs.deploy-staging.result == 'failure'
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: '#deployments'
        SLACK_COLOR: danger
        SLACK_MESSAGE: |
          ❌ Workflow Features deployment to staging failed!
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
          Author: ${{ github.actor }}
          Please check the logs and fix the issues.