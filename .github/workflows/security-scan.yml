name: Security Scan

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main, develop]
    paths:
      - '**/requirements.txt'
      - '**/package.json'
      - '**/package-lock.json'
      - 'Dockerfile*'
  workflow_dispatch:

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Python dependencies
        working-directory: ./apps/api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety bandit

      - name: Install Node.js dependencies
        working-directory: ./apps/web
        run: npm ci

      - name: Run Python security checks
        working-directory: ./apps/api
        run: |
          # Check for known vulnerabilities in dependencies
          safety check --json --output safety-report.json || true

          # Static analysis for security issues
          bandit -r src/ -f json -o bandit-report.json || true

      - name: Run Node.js security audit
        working-directory: ./apps/web
        run: |
          # Check for vulnerabilities in npm packages
          npm audit --audit-level=moderate --json > npm-audit-report.json || true

      - name: Run Semgrep security analysis
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
            p/typescript
            p/react
            p/jwt
            p/sql-injection
            p/xss

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            ./apps/api/safety-report.json
            ./apps/api/bandit-report.json
            ./apps/web/npm-audit-report.json

      - name: Create security summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Tool | Status | Issues Found |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|--------------|" >> $GITHUB_STEP_SUMMARY

          # Process safety report
          if [ -f "./apps/api/safety-report.json" ]; then
            SAFETY_ISSUES=$(jq '.vulnerabilities | length' ./apps/api/safety-report.json 2>/dev/null || echo "0")
            echo "| Safety (Python) | ✅ | $SAFETY_ISSUES |" >> $GITHUB_STEP_SUMMARY
          fi

          # Process npm audit report
          if [ -f "./apps/web/npm-audit-report.json" ]; then
            NPM_ISSUES=$(jq '.metadata.vulnerabilities.total' ./apps/web/npm-audit-report.json 2>/dev/null || echo "0")
            echo "| NPM Audit | ✅ | $NPM_ISSUES |" >> $GITHUB_STEP_SUMMARY
          fi

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build API container
        run: |
          docker build -t lcopilot-api:scan ./apps/api

      - name: Build Web container
        run: |
          docker build -t lcopilot-web:scan ./apps/web

      - name: Run Trivy container scan for API
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'lcopilot-api:scan'
          format: 'sarif'
          output: 'trivy-api-results.sarif'

      - name: Run Trivy container scan for Web
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'lcopilot-web:scan'
          format: 'sarif'
          output: 'trivy-web-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: |
            trivy-api-results.sarif
            trivy-web-results.sarif

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run TruffleHog secret scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks secret scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Python dependencies
        working-directory: ./apps/api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pip-licenses

      - name: Install Node.js dependencies
        working-directory: ./apps/web
        run: npm ci

      - name: Generate Python license report
        working-directory: ./apps/api
        run: |
          pip-licenses --format=json --output-file=python-licenses.json

      - name: Generate Node.js license report
        working-directory: ./apps/web
        run: |
          npx license-checker --json --out npm-licenses.json

      - name: Check for restricted licenses
        run: |
          # Define restricted licenses
          RESTRICTED_LICENSES="GPL-2.0 GPL-3.0 AGPL-3.0"

          # Check Python licenses
          if [ -f "./apps/api/python-licenses.json" ]; then
            for license in $RESTRICTED_LICENSES; do
              if jq -e --arg license "$license" '.[] | select(.License == $license)' ./apps/api/python-licenses.json > /dev/null; then
                echo "❌ Found restricted license in Python dependencies: $license"
                exit 1
              fi
            done
          fi

          # Check Node.js licenses
          if [ -f "./apps/web/npm-licenses.json" ]; then
            for license in $RESTRICTED_LICENSES; do
              if jq -e --arg license "$license" '. | to_entries[] | select(.value.licenses == $license)' ./apps/web/npm-licenses.json > /dev/null; then
                echo "❌ Found restricted license in Node.js dependencies: $license"
                exit 1
              fi
            done
          fi

          echo "✅ No restricted licenses found"

      - name: Upload license reports
        uses: actions/upload-artifact@v3
        with:
          name: license-reports
          path: |
            ./apps/api/python-licenses.json
            ./apps/web/npm-licenses.json

  compliance-report:
    name: Generate Compliance Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, secret-scan, license-scan]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download security reports
        uses: actions/download-artifact@v3
        with:
          name: security-reports
          path: ./reports/security/

      - name: Download license reports
        uses: actions/download-artifact@v3
        with:
          name: license-reports
          path: ./reports/licenses/

      - name: Generate compliance report
        run: |
          mkdir -p compliance-report

          cat > compliance-report/security-compliance.md << 'EOF'
          # Security Compliance Report

          **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}

          ## Security Scans Performed

          - ✅ Dependency vulnerability scan (Python & Node.js)
          - ✅ Container image security scan
          - ✅ Secret detection scan
          - ✅ Static analysis security testing (SAST)
          - ✅ License compliance check

          ## Summary

          This report confirms that the LCopilot application has undergone comprehensive security scanning.
          All identified issues should be reviewed and addressed according to the security policy.

          ## Recommendations

          1. Review and remediate any high/critical vulnerabilities found
          2. Update dependencies with known security issues
          3. Ensure no secrets are committed to the repository
          4. Verify license compatibility with project requirements

          ## Next Steps

          - Schedule regular security scans
          - Implement automated dependency updates
          - Establish security review process for new dependencies
          - Monitor security advisories for used packages
          EOF

      - name: Upload compliance report
        uses: actions/upload-artifact@v3
        with:
          name: compliance-report
          path: ./compliance-report/

      - name: Create issue for security findings
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const title = `Security Scan Findings - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Security Scan Results

            One or more security scans have identified issues that require attention.

            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}

            ## Action Required

            Please review the security scan results and address any identified vulnerabilities:

            1. Download the security reports from the workflow artifacts
            2. Review each finding for severity and impact
            3. Update dependencies or fix issues as appropriate
            4. Re-run security scans to verify fixes

            ## Files to Review

            - Dependency vulnerabilities: Check safety-report.json and npm-audit-report.json
            - Container security: Review Trivy scan results
            - Secrets: Verify no sensitive data is committed
            - Licenses: Ensure compliance with project license policy

            This issue will be automatically closed when security scans pass.
            `;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'priority:high']
            });

  notify-security-team:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: [compliance-report]
    if: failure()

    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          text: |
            🚨 Security scan failures detected in LCopilot!

            **Repository:** ${{ github.repository }}
            **Branch:** ${{ github.ref_name }}
            **Workflow:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Please review the security findings immediately.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}