name: LCopilot Trust Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run regression tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-suite: [unit, integration, fuzz, regression]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache Node dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Install Node dependencies
      run: |
        npm ci

    - name: Lint Python code
      run: |
        flake8 trust_platform/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 trust_platform/ tests/ --count --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      run: |
        mypy trust_platform/ --ignore-missing-imports

    - name: Security scan with bandit
      run: |
        bandit -r trust_platform/ -f json -o bandit-report.json || true
        bandit -r trust_platform/ --severity-level medium --exit-zero

    - name: Run Unit Tests
      if: matrix.test-suite == 'unit'
      run: |
        pytest tests/unit/ -v --cov=trust_platform --cov-report=xml --cov-report=html
        echo "UNIT_TEST_COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); print(tree.getroot().attrib['line-rate'])")" >> $GITHUB_ENV

    - name: Run Integration Tests
      if: matrix.test-suite == 'integration'
      run: |
        pytest tests/integration/ -v --maxfail=5

    - name: Run Fuzz Tests
      if: matrix.test-suite == 'fuzz'
      run: |
        python -m pytest tests/test_fuzz_engine.py -v --tb=short
        echo "FUZZ_TEST_RESULT=$?" >> $GITHUB_ENV

    - name: Run Regression Tests
      if: matrix.test-suite == 'regression'
      run: |
        python tests/run_regression_tests.py --fixtures-dir fixtures/ --output-dir test-results/
        echo "REGRESSION_TEST_RESULT=$?" >> $GITHUB_ENV

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-suite }}
        path: |
          test-results/
          coverage.xml
          htmlcov/
          bandit-report.json
        retention-days: 30

    - name: Upload coverage to Codecov
      if: matrix.test-suite == 'unit'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Build distribution packages
      run: |
        python -m pip install --upgrade pip build
        python -m build

    - name: Store build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  deploy-staging:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        aws lambda update-function-code \
          --function-name lcop-trust-platform-staging \
          --zip-file fileb://dist/lcop-trust-platform.zip || true

    - name: Run staging smoke tests
      run: |
        python tests/smoke_tests.py --environment staging

    - name: Notify team
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: "LCopilot Trust Platform deployed to staging"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        aws lambda update-function-code \
          --function-name lcop-trust-platform-prod \
          --zip-file fileb://dist/lcop-trust-platform.zip || true

    - name: Run production smoke tests
      run: |
        python tests/smoke_tests.py --environment production

    - name: Create release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Changes in this Release
          - Automated deployment from main branch
          - All tests passed
          - Fuzz testing completed successfully
        draft: false
        prerelease: false

    - name: Notify team
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: "LCopilot Trust Platform v${{ github.run_number }} deployed to production"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install locust

    - name: Run performance tests
      run: |
        python tests/performance_tests.py --duration 300 --users 50

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-results
        path: performance-results/

  compliance-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Run compliance validation tests
      run: |
        python tests/compliance_validation_tests.py --all-fixtures
        echo "COMPLIANCE_TEST_RESULT=$?" >> $GITHUB_ENV

    - name: Validate UCP600 rule coverage
      run: |
        python tests/validate_rule_coverage.py --standard UCP600

    - name: Validate ISBP rule coverage
      run: |
        python tests/validate_rule_coverage.py --standard ISBP

    - name: Upload compliance reports
      uses: actions/upload-artifact@v4
      with:
        name: compliance-reports
        path: compliance-reports/

  notification:
    needs: [test, build, security-scan, compliance-check]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.build.result == 'success' }}
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          ✅ LCopilot Trust Platform CI/CD Pipeline Completed Successfully

          📊 Test Results:
          - Unit Tests: ✅ Passed
          - Integration Tests: ✅ Passed
          - Fuzz Tests: ✅ Passed
          - Regression Tests: ✅ Passed
          - Security Scan: ✅ Passed
          - Compliance Check: ✅ Passed

          🚀 Ready for deployment
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' }}
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          ❌ LCopilot Trust Platform CI/CD Pipeline Failed

          📊 Test Results:
          - Unit Tests: ${{ needs.test.result == 'success' && '✅' || '❌' }}
          - Security Scan: ${{ needs.security-scan.result == 'success' && '✅' || '❌' }}
          - Compliance Check: ${{ needs.compliance-check.result == 'success' && '✅' || '❌' }}

          Please check the workflow logs for details.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}